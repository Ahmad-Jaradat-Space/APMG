function stats = compareTimeSeries(gps_ts, grace_ts, time_gps, time_grace)
gps_ts = gps_ts(:);
grace_ts = grace_ts(:);
time_gps = time_gps(:);
time_grace = time_grace(:);
time_start = max(min(time_gps), min(time_grace));
time_end = min(max(time_gps), max(time_grace));
time_common = time_start:30.44:time_end;
time_common = time_common(:);
[time_gps_unique, gps_unique_idx] = unique(time_gps, 'stable');
gps_ts_unique = gps_ts(gps_unique_idx);
[time_grace_unique, grace_unique_idx] = unique(time_grace, 'stable');
grace_ts_unique = grace_ts(grace_unique_idx);
gps_interp = interp1(time_gps_unique, gps_ts_unique, time_common, 'linear', NaN);
grace_interp = interp1(time_grace_unique, grace_ts_unique, time_common, 'linear', NaN);
common_valid = ~isnan(gps_interp) & ~isnan(grace_interp);
gps_common = gps_interp(common_valid);
grace_common = grace_interp(common_valid);
n_common = length(gps_common);
stats = struct();
stats.n_common = n_common;
stats.bias = mean(grace_common - gps_common);
stats.rmse = rms(grace_common - gps_common);
correlation_matrix = corrcoef(gps_common, grace_common);
stats.correlation = correlation_matrix(1, 2);
sse = sum((gps_common - grace_common).^2);
ssu = sum((gps_common - mean(gps_common)).^2);
stats.nse = 1 - sse/ssu;
stats.amplitude_gps = (max(gps_common) - min(gps_common)) / 2;
stats.amplitude_grace = (max(grace_common) - min(grace_common)) / 2;
stats.amplitude_ratio = stats.amplitude_grace / stats.amplitude_gps;
stats.phase_lag = 0;
end